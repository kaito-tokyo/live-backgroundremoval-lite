uniform float4x4 ViewProj;
uniform texture2d image;
uniform texture2d mask;

sampler_state def_sampler
{
	Filter = Linear;
	AddressU = Clamp;
	AddressV = Clamp;
};

struct VertInOut {
	float4 pos : POSITION;
	float2 uv : TEXCOORD0;
};

VertInOut VSDefault(VertInOut vert_in)
{
	VertInOut vert_out;
	vert_out.pos = mul(float4(vert_in.pos.xyz, 1.0), ViewProj);
	vert_out.uv = vert_in.uv;
	return vert_out;
}

float4 PSDraw(VertInOut vert_in) : TARGET
{
	return image.Sample(def_sampler, vert_in.uv);
}

float4 PSDrawWithMask(VertInOut vert_in) : TARGET
{
	float2 uv = vert_in.uv;
	float4 final_color;
	final_color.rgb = image.Sample(def_sampler, uv).rgb;
	final_color.a = mask.Sample(def_sampler, vert_in.uv).r;
	return final_color;
}

technique Draw
{
	pass
	{
		vertex_shader = VSDefault(vert_in);
		pixel_shader = PSDraw(vert_in);
	}
}

technique DrawWithMask
{
	pass
	{
		vertex_shader = VSDefault(vert_in);
		pixel_shader = PSDrawWithMask(vert_in);
	}
}
