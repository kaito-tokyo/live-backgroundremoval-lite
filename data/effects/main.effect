uniform float4x4 ViewProj;
uniform texture2d image;

uniform float texelWidth;
uniform float texelHeight;
uniform int kernelSize;

uniform texture2d mask;

sampler_state def_sampler
{
	Filter = Linear;
	AddressU = Clamp;
	AddressV = Clamp;
};

sampler_state linear_sampler
{
	Filter = Linear;
	AddressU = Clamp;
	AddressV = Clamp;
};

sampler_state point_sampler
{
	Filter = Point;
	AddressU = Clamp;
	AddressV = Clamp;
};

struct VertInOut {
	float4 pos : POSITION;
	float2 uv : TEXCOORD0;
};

VertInOut VSDefault(VertInOut vert_in)
{
	VertInOut vert_out;
	vert_out.pos = mul(float4(vert_in.pos.xyz, 1.0), ViewProj);
	vert_out.uv = vert_in.uv;
	return vert_out;
}

float4 PSDraw(VertInOut vert_in) : TARGET
{
	return image.Sample(def_sampler, vert_in.uv);
}

float4 PSDrawWithMask(VertInOut vert_in) : TARGET
{
	float2 uv = vert_in.uv;
	float4 final_color;

	final_color.rgb = image.Sample(def_sampler, uv).rgb;
	final_color.a = mask.Sample(def_sampler, uv).r;

	return final_color;
}

float4 PSConvertToGrayscale(VertInOut vert_in) : TARGET
{
	float4 color = image.Sample(def_sampler, vert_in.uv);
	float luma = dot(color.rgb, float3(0.2126, 0.7152, 0.0722));
	return float4(luma, luma, luma, 1.0f);
}

float4 PSHorizontalBoxFilterR8(VertInOut vert_in) : TARGET
{
	float2 uv = vert_in.uv;
	int radius = kernelSize / 2;

	float bilinear_sum = 0.0f;
    for (int i = 1; i <= radius / 2; i++) {
		float2 offset = float2((float(i * 2) - 0.5f) * texelWidth, 0.0f);
		bilinear_sum += image.Sample(linear_sampler, uv + offset).r;
		bilinear_sum += image.Sample(linear_sampler, uv - offset).r;
	}

	float sum = image.Sample(linear_sampler, vert_in.uv).r + bilinear_sum * 2.0f;

	float luma = sum / float(kernelSize);

	return float4(luma, luma, luma, 1.0f);
}

float4 PSVerticalBoxFilterR8(VertInOut vert_in) : TARGET
{
	float2 uv = vert_in.uv;
	int radius = kernelSize / 2;

	float bilinear_sum = 0.0f;
    for (int i = 1; i <= radius / 2; i++) {
		float2 offset = float2(0.0f, (float(i * 2) - 0.5f) * texelHeight);
		bilinear_sum += image.Sample(linear_sampler, uv + offset).r;
		bilinear_sum += image.Sample(linear_sampler, uv - offset).r;
	}

	float sum = image.Sample(linear_sampler, vert_in.uv).r + bilinear_sum * 2.0f;

	float luma = sum / float(kernelSize);

	return float4(luma, luma, luma, 1.0f);
}

technique Draw
{
	pass
	{
		vertex_shader = VSDefault(vert_in);
		pixel_shader = PSDraw(vert_in);
	}
}

technique DrawWithMask
{
	pass
	{
		vertex_shader = VSDefault(vert_in);
		pixel_shader = PSDrawWithMask(vert_in);
	}
}

technique ConvertToGrayscale
{
	pass
	{
		vertex_shader = VSDefault(vert_in);
		pixel_shader = PSConvertToGrayscale(vert_in);
	}
}

technique HorizontalBoxFilterR8
{
	pass
	{
		vertex_shader = VSDefault(vert_in);
		pixel_shader = PSHorizontalBoxFilterR8(vert_in);
	}
}

technique VerticalBoxFilterR8
{
	pass
	{
		vertex_shader = VSDefault(vert_in);
		pixel_shader = PSVerticalBoxFilterR8(vert_in);
	}
}

