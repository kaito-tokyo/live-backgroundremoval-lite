#!/bin/bash
#
# A script that downloads the ONNX Runtime NuGet package, builds a
# universal library for macOS, and generates a config file so that
# it can be found by CMake's find_package.
#

# --- Configuration ---
# Version of ONNX Runtime to download
readonly ONNX_RUNTIME_VERSION="1.22.1"

# Installation prefix directory
readonly INSTALL_PREFIX="nuget_installed/osx-universal-obs"

# Settings to make the script more robust
set -euo pipefail

# --- Preparation ---
echo "Creating directories..."
mkdir -p nuget_installed
mkdir -p "${INSTALL_PREFIX}/lib"
mkdir -p "${INSTALL_PREFIX}/include/onnxruntime"
mkdir -p "${INSTALL_PREFIX}/share/cmake/onnxruntime"


# --- Download and Extract NuGet Package ---
readonly NUPKG_FILE="nuget_installed/Microsoft.ML.OnnxRuntime.${ONNX_RUNTIME_VERSION}.nupkg"
readonly NUPKG_URL="https://www.nuget.org/api/v2/package/Microsoft.ML.OnnxRuntime/${ONNX_RUNTIME_VERSION}"
readonly EXTRACT_DIR="nuget_installed/onnxruntime"

if [ ! -f "${NUPKG_FILE}" ]; then
    echo "Downloading ONNX Runtime NuGet package version ${ONNX_RUNTIME_VERSION}..."
    curl -fsSL "${NUPKG_URL}" -o "${NUPKG_FILE}"
else
    echo "NuGet package already exists. Skipping download."
fi

echo "Extracting NuGet package..."
# Temporarily disable -e because unzip can sometimes return a success exit code (0) even on failure.
set +e
unzip -o "${NUPKG_FILE}" -d "${EXTRACT_DIR}" > /dev/null 2>&1
unzip_exit_code=$?
set -e
if [ $unzip_exit_code -ne 0 ]; then
    echo "Warning: unzip exited with code ${unzip_exit_code}. This might be okay."
fi


# --- Create Universal Library (arm64 + x86_64) ---
echo "Creating universal library for macOS..."
lipo -create \
    "${EXTRACT_DIR}/runtimes/osx-arm64/native/libonnxruntime.dylib" \
    "${EXTRACT_DIR}/runtimes/osx-x64/native/libonnxruntime.dylib" \
    -output "${INSTALL_PREFIX}/lib/libonnxruntime.dylib"


# --- Copy Header Files ---
echo "Copying header files..."
# -a is archive mode (preserves permissions, etc.)
cp -a "${EXTRACT_DIR}/build/native/include/"* "${INSTALL_PREFIX}/include/onnxruntime/"


# --- Generate CMake Config Files ---
echo "Generating CMake config files..."
readonly CMAKE_DIR="${INSTALL_PREFIX}/share/cmake/onnxruntime"

# Generate onnxruntimeConfig.cmake
cat <<EOF > "${CMAKE_DIR}/onnxruntimeConfig.cmake"
# Generated by setup_onnxruntime.sh

# Find dependencies (if any, none for now on macOS system level)
include(CMakeFindDependencyMacro)

# Include the targets file
include("\${CMAKE_CURRENT_LIST_DIR}/onnxruntimeTargets.cmake")

# A function to check if the required components are found
check_required_components(onnxruntime)
EOF

# Generate onnxruntimeConfigVersion.cmake
cat <<EOF > "${CMAKE_DIR}/onnxruntimeConfigVersion.cmake"
# Generated by setup_onnxruntime.sh

set(PACKAGE_VERSION "${ONNX_RUNTIME_VERSION}")

if(PACKAGE_VERSION VERSION_LESS PACKAGE_FIND_VERSION)
  set(PACKAGE_VERSION_COMPATIBLE FALSE)
else()
  set(PACKAGE_VERSION_COMPATIBLE TRUE)
  if(PACKAGE_FIND_VERSION_EXACT)
    if(NOT PACKAGE_VERSION VERSION_EQUAL PACKAGE_FIND_VERSION)
      set(PACKAGE_VERSION_COMPATIBLE FALSE)
    endif()
  endif()
endif()
EOF

# Generate onnxruntimeTargets.cmake
cat <<EOF > "${CMAKE_DIR}/onnxruntimeTargets.cmake"
# Generated by setup_onnxruntime.sh
# Defines the imported target onnxruntime::onnxruntime

# Guard against multiple inclusions
if(TARGET onnxruntime::onnxruntime)
    return()
endif()

# Create the imported target for the shared library
add_library(onnxruntime::onnxruntime SHARED IMPORTED)

# Get the root directory of the installation from this file's location
get_filename_component(_onnxruntime_root_dir "\${CMAKE_CURRENT_LIST_DIR}/../../../" REALPATH)

# Set target properties
set_target_properties(onnxruntime::onnxruntime PROPERTIES
    IMPORTED_LOCATION           "\${_onnxruntime_root_dir}/lib/libonnxruntime.dylib"
    INTERFACE_INCLUDE_DIRECTORIES "\${_onnxruntime_root_dir}/include"
    # Link against required macOS frameworks
    INTERFACE_LINK_LIBRARIES    "-framework CoreFoundation;-framework Security"
)
EOF

echo ""
echo "--- âœ… ONNX Runtime setup complete! ---"
echo "Installation prefix: ${PWD}/${INSTALL_PREFIX}"
echo ""
echo "To use in your CMake project, add the following to your CMakeLists.txt:"
echo 'find_package(onnxruntime CONFIG REQUIRED)'
echo 'target_link_libraries(your_target_name PRIVATE onnxruntime::onnxruntime)'
echo ""
echo "Then, configure CMake with:"
echo "cmake -B build -S . -DCMAKE_PREFIX_PATH=${PWD}/${INSTALL_PREFIX}"
echo "----------------------------------------"

