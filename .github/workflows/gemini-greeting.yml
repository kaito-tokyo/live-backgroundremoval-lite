name: 'ü§ñ Gemini Greeting'

on:
  workflow_call:
    secrets:
      APP_PRIVATE_KEY:
        required: false
      GEMINI_API_KEY:
        required: false

concurrency:
  group: '${{ github.workflow }}-${{ github.event.issue.number }}'
  cancel-in-progress: true

defaults:
  run:
    shell: 'bash'

jobs:
  greet:
    runs-on: 'ubuntu-latest'
    permissions:
      issues: 'write'
      id-token: 'write'
    steps:
      - name: 'Mint identity token'
        id: 'mint_identity_token'
        if: |-
          ${{ vars.APP_ID }}
        uses: 'actions/create-github-app-token@a8d616148505b5069dccd32f177bb87d7f39123b' # ratchet:actions/create-github-app-token@v2
        with:
          app-id: '${{ vars.APP_ID }}'
          private-key: '${{ secrets.APP_PRIVATE_KEY }}'
          permission-issues: 'write'

      - name: 'Generate Greeting Text'
        id: 'generate_greeting'
        uses: 'google-github-actions/run-gemini-cli@v0'
        env:
          ISSUE_TITLE: '${{ github.event.issue.title }}'
          ISSUE_BODY: '${{ github.event.issue.body }}'
          ISSUE_AUTHOR: '${{ github.actor }}'
        with:
          gemini_cli_version: '${{ vars.GEMINI_CLI_VERSION }}'
          gcp_workload_identity_provider: '${{ vars.GCP_WIF_PROVIDER }}'
          gcp_project_id: '${{ vars.GOOGLE_CLOUD_PROJECT }}'
          gcp_location: '${{ vars.GOOGLE_CLOUD_LOCATION }}'
          gcp_service_account: '${{ vars.SERVICE_ACCOUNT_EMAIL }}'
          use_vertex_ai: '${{ vars.GOOGLE_GENAI_USE_VERTEXAI }}'
          google_api_key: '${{ secrets.GOOGLE_API_KEY }}'
          use_gemini_code_assist: '${{ vars.GOOGLE_GENAI_USE_GCA }}'
          gemini_debug: '${{ fromJSON(vars.DEBUG || vars.ACTIONS_STEP_DEBUG || false) }}'
          gemini_model: '${{ vars.GEMINI_MODEL }}'
          gemini_api_key: '${{ secrets.GEMINI_API_KEY }}'
          settings: |-
            {
              "maxSessionTurns": 5
            }
          prompt: |-
            ## Persona
            You are a friendly AI assistant for a GitHub repository. Your only task is to provide a warm, welcoming, and context-aware initial response to a newly created issue.

            ## Critical Constraints
            - Your final output **MUST** be only the Markdown text for the comment.
            - Do not wrap it in code blocks or add any explanatory text.
            - Do not attempt to use any tools.

            ## Execution Workflow
            1.  **Analyze Context**: Read the issue's title and body from the `${ISSUE_TITLE}` and `${ISSUE_BODY}` environment variables to understand the user's intent (e.g., bug report, feature request, question).
            2.  **Generate Message**: Compose a friendly greeting addressed to `@${ISSUE_AUTHOR}`. Include a brief, helpful sentence based on the intent.
                - For a bug report: "Thank you for reporting this. The team will take a look shortly."
                - For a feature request: "Thanks for the great suggestion! We'll review it for future consideration."
                - For anything else: "Thank you for creating this issue."
            3.  **Output**: Produce the complete and final Markdown message as your direct output.

      - name: 'Post Greeting'
        env:
          GITHUB_TOKEN: '${{ steps.mint_identity_token.outputs.token || secrets.GITHUB_TOKEN || github.token }}'
          ISSUE_NUMBER: '${{ github.event.issue.number }}'
          # ‰øÆÊ≠£ÁÇπ: Êñ∞„Åó„ÅÑÂá∫ÂäõÂ§âÊï∞ `summary` „ÇíÂèÇÁÖß„Åô„Çã„Çà„ÅÜ„Å´Â§âÊõ¥
          MESSAGE: '${{ steps.generate_greeting.outputs.summary }}'
          REPOSITORY: '${{ github.repository }}'
        run: |-
          if [[ -n "${MESSAGE}" ]]; then
            gh issue comment "${ISSUE_NUMBER}" \
              --body "${MESSAGE}" \
              --repo "${REPOSITORY}"
          else
            echo "Generated message was empty. Skipping comment."
          fi
